#!/usr/bin/env python3
"""
Vulnerability Scanner for CS1060 Homework 5
Author: Yann C. Lopez (with AI assistance)
Educational purposes only - demonstrating security vulnerabilities
"""

import nmap
import paramiko
import requests
import sys
import socket
from requests.auth import HTTPBasicAuth
import argparse

def scan_ports(target='127.0.0.1'):
    """Scan for open TCP ports on target, ignoring ports 9000 and higher"""
    try:
        nm = nmap.PortScanner()
        # Scan common ports range, excluding 9000+
        nm.scan(target, '1-8999', arguments='-sT')
        
        open_ports = []
        if target in nm.all_hosts():
            for proto in nm[target].all_protocols():
                ports = nm[target][proto].keys()
                for port in ports:
                    if nm[target][proto][port]['state'] == 'open':
                        open_ports.append(port)
        
        return sorted(open_ports)
    except Exception:
        return []

def try_http_auth(host, port, username, password):
    """Attempt HTTP basic authentication"""
    try:
        url = f'http://{host}:{port}'
        response = requests.get(url, auth=HTTPBasicAuth(username, password), timeout=5)
        if response.status_code == 200:
            return response.text.strip()
    except Exception:
        pass
    return None

def try_ssh_auth(host, port, username, password):
    """Attempt SSH password authentication"""
    client = None
    try:
        # Suppress paramiko logging
        import logging
        logging.getLogger("paramiko").setLevel(logging.CRITICAL)
        
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        # Connect with timeout
        client.connect(
            host, 
            port=port, 
            username=username, 
            password=password,
            timeout=5,
            allow_agent=False,
            look_for_keys=False,
            banner_timeout=5,
            auth_timeout=5
        )
        
        # Try to open a channel and receive data
        transport = client.get_transport()
        if transport and transport.is_authenticated():
            channel = transport.open_session()
            channel.settimeout(5)
            
            # Try to receive data
            output = b''
            while True:
                try:
                    data = channel.recv(1024)
                    if not data:
                        break
                    output += data
                except socket.timeout:
                    break
                except Exception:
                    break
            
            channel.close()
            
            if output:
                return output.decode('utf-8', errors='ignore').strip()
            return 'success'
            
    except Exception:
        pass
    finally:
        if client:
            try:
                client.close()
            except Exception:
                pass
    return None

def main():
    parser = argparse.ArgumentParser(description='Vulnerability scanner for educational purposes')
    parser.add_argument('-v', '--verbose', action='store_true', help='Enable verbose output')
    args = parser.parse_args()
    
    verbose = args.verbose
    
    # Credentials dictionary
    credentials = {
        'admin': 'admin',
        'root': 'abc123',
        'skroob': '12345'
    }
    
    target = '127.0.0.1'
    
    if verbose:
        print(f'Scanning {target} for open ports...', file=sys.stderr)
    
    # Scan for open ports
    open_ports = scan_ports(target)
    
    if verbose:
        print(f'Found open ports: {open_ports}', file=sys.stderr)
    
    # Try each port with each credential
    for port in open_ports:
        if verbose:
            print(f'Testing port {port}...', file=sys.stderr)
        
        for username, password in credentials.items():
            # Try HTTP
            if verbose:
                print(f'  Trying HTTP with {username}:{password}', file=sys.stderr)
            
            result = try_http_auth(target, port, username, password)
            if result:
                print(f'http://{username}:{password}@{target}:{port} {result}')
                continue
            
            # Try SSH
            if verbose:
                print(f'  Trying SSH with {username}:{password}', file=sys.stderr)
            
            result = try_ssh_auth(target, port, username, password)
            if result:
                print(f'ssh://{username}:{password}@{target}:{port} {result}')

if __name__ == '__main__':
    main()

